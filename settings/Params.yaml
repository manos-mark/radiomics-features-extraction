# This is an example of a parameters file
# It is written according to the YAML-convention (www.yaml.org) and is checked by the code for consistency.
# Three types of parameters are possible and reflected in the structure of the document:
#
# Parameter category:
#   Setting Name: <value>
#
# The three parameter categories are:
# - setting: Setting to use for preprocessing and class specific settings. if no <value> is specified, the value for
#   this setting is set to None.
# - featureClass: Feature class to enable, <value> is list of strings representing enabled features. If no <value> is
#   specified or <value> is an empty list ('[]'), all features for this class are enabled.
# - imageType: image types to calculate features on. <value> is custom kwarg settings (dictionary). if <value> is an
#   empty dictionary ('{}'), no custom settings are added for this input image.
#
# Some parameters have a limited list of possible values. Where this is the case, possible values are listed in the
# package documentation



# Settings to use, possible settings are listed in the documentation (section "Customizing the extraction").
setting:
  ############################################### -1- Feature Extractor Level ##########################################

  #Image Normalization
  normalize: # [False]: Boolean, set to True to enable normalizing of the image before any resampling.
             # See also normalizeImage().

  normalizeScale: # [1]: Float, > 0, determines the scale after normalizing the image.
                  # If normalizing is disabled, this has no effect.

  removeOutliers: # [None]: Float, > 0, defines the outliers to remove from the image.
                  # An outlier is defined as values that differ more than nσx from the mean, where n>0 and equal to the
                  # value of this setting. If this parameter is omitted (providing it without a value (i.e. None) in the
                  # parameter file will throw an error), no outliers are removed. If normalizing is disabled, this has
                  # no effect. See also normalizeImage().

  # Resampling the image
  resampledPixelSpacing: # This disables resampling, as it is interpreted as None, to enable it, specify spacing in x, y, z as [x, y , z]
                         # [None]: List of 3 floats (>= 0), sets the size of the voxel in (x, y, z) plane when resampling.
                         # A value of 0 is replaced with the spacing for that dimension as it is in the original
                         # (non-resampled) mask. For example, to perform only in-plane resampling, the x and y values
                         # alone should be edited (e.g.: [2,2,0]). In-plane resolution is always relative to image
                         # acquisition plane (i.e. axial, coronal or sagittal).

  interpolator: # [sitkBSpline]: SimpleITK constant or string name thereof, sets interpolator to use for resampling.
                # Enumerated value, possible values:
                                # - sitkNearestNeighbor (= 1)
                                # - sitkLinear (= 2)
                                # - sitkBSpline (= 3)
                                # - sitkGaussian (= 4)
                                # - sitkLabelGaussian (= 5)
                                # - sitkHammingWindowedSinc (= 6)
                                # - sitkCosineWindowedSinc (= 7)
                                # - sitkWelchWindowedSinc (= 8)
                                # - sitkLanczosWindowedSinc (= 9)
                                # - sitkBlackmanWindowedSinc (= 10)

  padDistance: # [5]: Integer, ≥0, set the number of voxels pad cropped tumor volume with during resampling. Padding
               # occurs in new feature space and is done on all faces, i.e. size increases in x, y and z direction by
               # 2*padDistance. Padding is needed for some filters (e.g. LoG). Value of padded voxels are set to
               # original gray level intensity, padding does not exceed original image boundaries. N.B. After
               # application of filters image is cropped again without padding.

  # *** Note ***
  # Resampling is disabled when either resampledPixelSpacing or interpolator is set to None
  # ************

  # Pre-Cropping
  preCrop: # [False]: Boolean, if true and resampling is disabled, crops the image onto the bounding box with additional
           # padding as specified in padDistance. Similar to padding after resampling, padding does not exceed original
           # image bounds after pre-cropping. Setting preCrop to true speeds up extraction and makes it less memory
           # intensive, especially in the case of large images with only small ROIs.

  # *** Note ***
  # Because image and mask are also cropped onto the bounding box before they are passed to the feature classes,
  # pre-crop is only beneficial when filters are enabled.
  # ************

  # Resegmentation
  resegmentRange: # [None]: List of 1 or 2 floats, specifies the lower and and optionally upper threshold, respectively.
                  # Segmented voxels outside this range are removed from the mask prior to feature calculation.
                  # When the value is None (default), no resegmentation is performed. Resegemented size is checked
                  # (using parameter minimumROISize, default 1) and upon fail, an error is logged and extraction is
                  # skipped for this case.

  resegmentMode: # [‘absolute’]: string, specifying the method to use for defining the resegmentation thresholds:
                        # - ‘absolute’: The resegmentRange values are treated as absolute values, i.e. used directly to
                        #               perform resegmentation.
                        # - ‘relative’: The resegmentRange values are treated as relative to the maximum in the ROI, i.e.
                        #               the actual threshold used is defined as threshold=value∗Xmax

  resegmentShape: # [False]: Boolean, if set to True, the resegmented mask is also used for shape calculation. If set
                  # to False (default), only first order and texture classes are calculated using the resegmented mask
                  # (known in IBSI as the intensity mask). Shape is then calculated using the mask after any optional
                  # resampling and corrections (known in IBSI as the morphologic mask).

  # Mask validation
  minimumROIDimensions: 2 # [2]: Integer, range 1-3, specifies the minimum dimensions (1D, 2D or 3D, respectively).
                          # Single-voxel segmentations are always excluded.

  minimumROISize: # [None]: Integer, > 0, specifies the minimum number of voxels required. Test is skipped if this
                  # parameter is omitted (specifying it as None in the parameter file will throw an error).

  geometryTolerance: # [None]: Float, determines the tolarance used by SimpleITK to compare origin, direction and spacing
                     # between image and mask. Affects the fist step in checkMask(). If set to None, PyRadiomics will
                     # use SimpleITK default (1e-16).

  correctMask: # [False]: Boolean, if set to true, PyRadiomics will attempt to resample the mask to the image geometry
               # when the first step in checkMask() fails. This uses a nearest neighbor interpolator. Mask check will
               # still fail if the ROI defined in the mask includes areas outside of the image physical space.

  # Miscellaneous
  additionalInfo: # [True]: boolean, set to False to disable inclusion of additional information on the extraction in
                  # the output. See also addProvenance().
  ######################################################################################################################



  ############################################### -2- Filter Level #####################################################

  # Laplacian of Gaussian settings
  sigma: [1] # List of floats or integers, must be greater than 0. Sigma values to use for the filter (determines coarseness).

  # !!! Warning !!!
  # Setting for sigma must be provided if LoG filter is enabled. If omitted, no LoG image features are calculated and
  # the function will return an empty dictionary.
  # !!!!!!!!!!!!!!!

  # Wavelet settings
  start_level: 0 # [0]: integer, 0 based level of wavelet which should be used as first set of decompositions from which a
                 # signature is calculated

  level: 1 # [1]: integer, number of levels of wavelet decompositions from which a signature is calculated.

  wavelet: 'coif1' # [“coif1”]: string, type of wavelet decomposition. Enumerated value, validated against possible values
           # present in the pyWavelet.wavelist(). Current possible values (pywavelet version 0.4.0) (where an aditional
           # number is needed, range of values is indicated in []):
                       # - haar
                       # - dmey
                       # - sym[2-20]
                       # - db[1-20]
                       # - coif[1-5]
                       # - bior[1.1, 1.3, 1.5, 2.2, 2.4, 2.6, 2.8, 3.1, 3.3, 3.5, 3.7, 3.9, 4.4, 5.5, 6.8]
                       # - rbio[1.1, 1.3, 1.5, 2.2, 2.4, 2.6, 2.8, 3.1, 3.3, 3.5, 3.7, 3.9, 4.4, 5.5, 6.8]

  # Gradient settings
  gradientUseSpacing: True # [True]: Boolean, if true, image spacing is taken into account when computing the gradient
                           # magnitude in the image.

  # Local Binary Pattern 2D
  lbp2DRadius:  # [1]: Float, > 0, specifies the radius in which the neighbours should be sampled
  lbp2DSamples: # [9]: Integer, ≥1, specifies the number of samples to use
  lbp2DMethod:  # [‘uniform’]: String, specifies the method for computing the LBP to use.

  # !!! Warning !!!
  # Requires package skimage to function.
  # !!!!!!!!!!!!!!!

  #Local Binary Pattern 3D
  lbp3DLevels: 2               # [2]: integer, ≥1, specifies the the number of levels in spherical harmonics to use.
  lbp3DIcosphereRadius: 1      # [1]: Float, > 0, specifies the radius in which the neighbours should be sampled
  lbp3DIcosphereSubdivision: 1 # [1]: Integer, ≥0, specifies the number of subdivisions to apply in the icosphere

  # !!! Warning !!!
  # Requires package scipy and trimesh to function.
  # !!!!!!!!!!!!!!!
  ######################################################################################################################



  ############################################### -3- Feature Class Level ##############################################
  label: 1 # [1]: Integer, label value of Region of Interest (ROI) in labelmap.

  # Image discretization
  binWidth: 25 # [25]: Float, > 0, size of the bins when making a histogram and for discretization of the image gray level.

  binCount: # [None]: integer, > 0, specifies the number of bins to create. The width of the bin is then
                 # determined by the range in the ROI. No definitive evidence is available on which method of
                # discretization is superior, we advise a fixed bin width. See more here.

  # Forced 2D extraction
  force2D: False # [False]: Boolean, set to true to force a by slice texture calculation. Dimension that identifies the
                 # ‘slice’ can be defined in force2Ddimension. If input ROI is already a 2D ROI,
                 # features are automatically extracted in 2D.

  force2Ddimension: 0 # [0]: int, range 0-2. Specifies the ‘slice’ dimension for a by-slice feature extraction. A value
                      # of 0 represents the native acquisition plane for the images (usually axial for CT and axial,
                      # coronal or sagittal for MRI). Similarly, 1 identifies the out-of plane y dimension (e.g. coronal
                      # plane for an axial image) and 2 the out-of-plane x dimension (e.g. sagittal plane for an acial
                      # image). if force2D is set to False, this parameter has no effect.

  # Texture matrix weighting
  weightingNorm: # [None]: string, indicates which norm should be used when applying distance weighting.
                      # Enumerated setting, possible values:
                          # - ‘manhattan’: first order norm
                          # - ‘euclidean’: second order norm
                          # - ‘infinity’: infinity norm.
                          # - ‘no_weighting’: GLCMs are weighted by factor 1 and summed
                          # - None: Applies no weighting, mean of values calculated on separate matrices is returned.
                      # In case of other values, an warning is logged and option ‘no_weighting’ is used.
                      # This only affects the GLCM and GLRLM feature classes. Moreover, weighting is applied differently
                      # in those classes.
                      # For more information on how weighting is applied, see the documentation on GLCM and GLRLM.

  # Distance to neighbour
#    distances: [1] # [[1]]: List of integers. This specifies the distances between the center voxel and the neighbor,
#                     # for which angles should be generated. This only affects the GLCM and NGTDM feature classes.
#                     # The GLSZM and GLRLM feature classes use a fixed distance of 1 (infinity norm) to define neighbours.

  ######################################################################################################################



  ############################################### -4- Feature Class Specific Settings ##################################
  # First Order
  voxelArrayShift: 0 # [0]: Integer, This amount is added to the gray level intensity in features Energy, Total Energy
                     # and RMS, this is to prevent negative values. If using CT data, or data normalized with mean 0,
                     # consider setting this parameter to a fixed value (e.g. 2000) that ensures non-negative numbers in
                     # the image. Bear in mind however, that the larger the value, the larger the volume confounding
                     # effect will be.

  # GLCM
  symmetricalGLCM: True # [True]: boolean, indicates whether co-occurrences should be assessed in two directions per
                        # angle, which results in a symmetrical matrix, with equal distributions for i and j.
                        # A symmetrical matrix corresponds to the GLCM as defined by Haralick et al.

  # GLDM
  gldm_a: 0 # [0]: float, α cutoff value for dependence. A neighbouring voxel with gray level j is considered dependent
            # on center voxel with gray level i if |i−j|≤α
  ######################################################################################################################



  ############################################### -5- Voxel-based specific settings ####################################
  # When using PyRadiomics to generate feature maps, additional customization options exist. These control the
  # neighborhood around each voxel that is used for calculation (kernel) and what the background value should be, i.e.
  # the value of voxels for which there is no calculated value.

#  kernelRadius: 1    # [1]: integer, specifies the size of the kernel to use as the radius from the center voxel.
#                     # Therefore the actual size is 2 * kernelRadius + 1. E.g. a value of 1 yields a 3x3x3 kernel, a
#                     # value of 2 5x5x5, etc. In case of 2D extraction, the generated kernel will also be a 2D shape
#                     # (square instead of cube).
#
#  maskedKernel: True # [True]: boolean, specifies whether to mask the kernel with the overall mask. If True, only voxels
#                     # in the kernel that are also segmented in the mask are used for calculation. Otherwise, all voxels
#                     # inside the kernel are used. Moreover, gray value discretization is performed over the ROI if the
#                     # setting is set to True, and over the entire image if False.
#
#  initValue: 0       # [0]: float, value to use for voxels outside the ROI, or voxels where calculation failed. If set
#                     # to nan, 3D slicer will treat them as transparent voxels
#
#  voxelBatch: -1     # [-1]: integer > 0, this value controls the maximum number of voxels that are calculated in one
#                     # batch. Larger batches mean less loops in Python and therefore a quicker extraction, but do
#                     # require more memory. This setting allows the user to compromise between extraction speed and
#                     # memory usage. When providing this setting, the value is constrained to be > 0, only by not
#                     # providing it is the default value of -1 used (which means: all voxels in 1 batch).

  ######################################################################################################################



# Image types to use: for dictionaries / mappings, None values are not allowed, '{}' is interpreted as an empty dictionary
imageType:
  Original: {} # No filter applied

  Wavelet: {} # Wavelet filtering, yields 8 decompositions per level (all possible combinations of applying either a
              # High or a Low pass filter in each of the three dimensions. See also getWaveletImage()

  LoG: {}     # Laplacian of Gaussian filter, edge enhancement filter. Emphasizes areas of gray level change, where
              # sigma defines how coarse the emphasised texture should be. A low sigma emphasis on fine textures
              # (change over a short distance), where a high sigma value emphasises coarse textures (gray level change
              # over a large distance). See also getLoGImage()

  Square: {}  # Takes the square of the image intensities and linearly scales them back to the original range.
              # Negative values in the original image will be made negative again after application of filter.

  SquareRoot: {} # Takes the square root of the absolute image intensities and scales them back to original range.
                 # Negative values in the original image will be made negative again after application of filter.

  Logarithm: {} # Takes the logarithm of the absolute intensity + 1. Values are scaled to original range and negative
                # original values are made negative again after application of filter.

  Exponential: {} # Takes the the exponential, where filtered intensity is e^(absolute intensity). Values are scaled to
                  # original range and negative original values are made negative again after application of filter.

  Gradient: {} # Returns the magnitude of the local gradient. See also getGradientImage()
#  LBP2D: {} # Computes the Local Binary Pattern in a by-slice operation (2D). See also getLBP2DImage()
  LBP3D: {} # Computes the Local Binary Pattern in 3D using spherical harmonics. See also getLBP3DImage()

# Featureclasses, from which features must be calculated. If a featureclass is not mentioned, no features are calculated
# for that class. Otherwise, the specified features are calculated, or, if none are specified, all are calculated
# (excluding redundant/deprecated features).
featureClass:
  # redundant Compactness 1, Compactness 2 an Spherical Disproportion features are disabled by default, they can be
  # enabled by specifying individual feature names (as is done for glcm) and including them in the list.
  shape:  # disable redundant Compactness 1 and Compactness 2 features by specifying all other shape features
    - VoxelVolume
    - MeshVolume
    - SurfaceArea
    - SurfaceVolumeRatio
#    - Compactness1
#    - Compactness2
    - Sphericity
#    - SphericalDisproportion
    - Maximum3DDiameter
    - Maximum2DDiameterSlice
    - Maximum2DDiameterColumn
    - Maximum2DDiameterRow
    - MajorAxisLength
    - MinorAxisLength
    - LeastAxisLength
    - Elongation
    - Flatness
  firstorder: [] # specifying an empty list has the same effect as specifying nothing.
  glcm: # Disable SumAverage by specifying all other GLCM features available
    - 'Autocorrelation'
    - 'JointAverage'
    - 'ClusterProminence'
    - 'ClusterShade'
    - 'ClusterTendency'
    - 'Contrast'
    - 'Correlation'
    - 'DifferenceAverage'
    - 'DifferenceEntropy'
    - 'DifferenceVariance'
    - 'JointEnergy'
    - 'JointEntropy'
    - 'Imc1'
    - 'Imc2'
    - 'Idm'
    - 'Idmn'
    - 'Id'
    - 'Idn'
    - 'InverseVariance'
    - 'MaximumProbability'
    - 'SumEntropy'
    - 'SumSquares'
  glrlm: # for lists none values are allowed, in this case, all features are enabled
  glszm:
  gldm:  # contains deprecated features, but as no individual features are specified, the deprecated features are not enabled
